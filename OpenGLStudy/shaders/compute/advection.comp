#version 440 core

#include "fluidCommon.glsl"

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

float gauss(vec3 p, float r)
{
  return exp(-dot(p, p) / r);
}

float lineSplat(vec3 p, vec3 l1, vec3 l2, float r, out vec3 delta)
{
	vec3 line = l2 - l1;

	delta = p - l2;
	if (dot(delta, line) > 0.0)
		return gauss(delta, r);

	delta = p - l1;
	if (dot(delta, line) < 0.0)
		return gauss(delta, r);

	vec3 lineNorm = normalize(line);
	delta -= dot(lineNorm, delta) * lineNorm;
	return gauss(delta, r);
}

void main()
{
	vec3 coords = vec3(gl_GlobalInvocationID.xyz);
	ivec3 icoords = ivec3(gl_GlobalInvocationID.xyz);
	
	// Advection
	vec4 center;
	center = texelFetch(fluidSampler, icoords, 0);
	float dt = 1.0 / 60.0;
	vec3 backCoords = ((coords + 0.5) - center.xyz * dt * timeScale);

	float flip = 1.0;
#if VELOCITY_BOUNDARY_MODE == 1
	if ( any(lessThan(backCoords, vec3(0.0))) || any(greaterThan(backCoords, vec3(fluidSize))) )
		flip = -1.0;
#endif
	vec4 backFluid = texture(fluidSampler, backCoords / vec3(fluidSize)) * flip;
	vec4 density = texture(densitySampler, backCoords / vec3(fluidSize));

	center.xyz = backFluid.xyz;
	center.xyz *= velocityDissipation;
	vec4 pressure = texelFetch(pressureSampler, icoords, 0);

	// External forces
	/*
	vec3 h33 = vec3(0.23, 0.3, 0.35);
	vec3 asd = sin(time * 0.5 * (h33 * 2 - 1)) ;
	vec3 deltaCenter = coords - (asd * 0.2 + 0.5) * vec3(fluidSize);
	float splat = gauss(deltaCenter, externalSplat.radius);
	center.xyz += asd * splat * externalSplat.velocity;
	density += splat * externalSplat.density;
	density *= densityDissipation;
	*/

	if (mouseSplatActive)
	{
		vec3 delta;
		vec3 l1 = prevMouseSplatPos + fluidSize * 0.5;
		vec3 l2 = mouseSplatPos + fluidSize * 0.5;
		float splat;
		if (l1 == l2)
		{
			delta = coords - l1;
			splat = gauss(delta, mouseSplat.radius);
		}
		else
			splat = lineSplat(coords, l1, l2, mouseSplat.radius, delta);
		vec3 deltaNorm = normalize(delta);
		float lmd = leftMouseDown ? 1.0 : 0.0;
		float rmd = rightMouseDown ? 1.0 : 0.0;
		center.xyz += deltaNorm * splat * mouseSplat.velocity * lmd;
		pressure.r += splat * mouseSplat.pressure * lmd;
		density += splat * mouseSplat.density * rmd;
	}

	float freq = texture(audioFrequencySampler, coords.y / float(fluidSize.y)).r;
	vec3 delta = (coords - vec3(fluidSize) * 0.5) * vec3(1.0, 0.0, 1.0);
	vec3 deltaNorm = normalize(delta);
	mat3 rot2 = mat3(deltaNorm, vec3(0, 1, 0), cross(deltaNorm, vec3(0,1,0)));
	float splat = gauss(delta, externalSplat.radius * freq);

	center.xyz += (rot2 * externalSplat.rotation * vec3(1, 0, 0)) * splat * externalSplat.velocity;
	//center.xyz += (deltaNorm) * splat * externalSplat.velocity;
	density += splat * externalSplat.density;
	density *= densityDissipation;

	
	pressure.r += splat * externalSplat.pressure;

	deleteError(center); deleteError(pressure); deleteError(density);

	imageStore(fluidImage, icoords, FLUID_STORE_OP(center));
	imageStore(pressureImage, icoords, PRESSURE_STORE_OP(pressure));
	imageStore(densityImage, icoords, DENSITY_STORE_OP(density));
}