#version 440 core

#include "fluidCommon.glsl"

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

float gauss(vec3 p, float r)
{
  return exp(-dot(p, p) / r);
}

void main()
{
	vec3 coords = vec3(gl_GlobalInvocationID.xyz);
	ivec3 icoords = ivec3(gl_GlobalInvocationID.xyz);
	
	// Advection
	vec4 center;
	center = texelFetch(fluidSampler, icoords, 0);
	float dt = 1.0 / 60.0;
	vec3 backCoords = ((coords + 0.5) - center.xyz * dt * timeScale);
	vec4 backFluid = texture(fluidSampler, backCoords / vec3(fluidSize));
	vec4 density = texture(densitySampler, backCoords / vec3(fluidSize));
	center.xyz = backFluid.xyz;
	center.xyz *= velocityDissipation;


	// External forces
	/*
	vec3 h33 = vec3(0.23, 0.3, 0.35);
	vec3 asd = sin(time * 0.5 * (h33 * 2 - 1)) ;
	vec3 deltaCenter = coords - (asd * 0.2 + 0.5) * vec3(fluidSize);
	float splat = gauss(deltaCenter, externalSplat.radius);
	center.xyz += asd * splat * externalSplat.velocity;
	density += splat * externalSplat.density;
	density *= densityDissipation;
	*/

	float freq = texture(audioFrequencySampler, coords.y / float(fluidSize.y), 0).r;
	vec3 delta = (coords - vec3(fluidSize) * 0.5) * vec3(1.0, 0.0, 1.0);
	vec3 deltaNorm = normalize(delta);
	float splat = gauss(delta, externalSplat.radius * freq);

	//center.xyz += (externalSplat.rotation * deltaNorm) * splat * externalSplat.velocity;
	center.xyz += (deltaNorm) * splat * externalSplat.velocity;
	density += splat * externalSplat.density;
	density *= densityDissipation;

	vec4 pressure = texelFetch(pressureSampler, icoords, 0);
	pressure.r += splat * externalSplat.pressure;

	deleteError(center); deleteError(pressure); deleteError(density);

	imageStore(fluidImage, icoords, FLUID_STORE_OP(center));
	imageStore(pressureImage, icoords, PRESSURE_STORE_OP(pressure));
	imageStore(densityImage, icoords, DENSITY_STORE_OP(density));
}